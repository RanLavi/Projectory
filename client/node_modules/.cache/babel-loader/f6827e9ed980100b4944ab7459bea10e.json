{"ast":null,"code":"var _jsxFileName = \"/home/spectory/Documents/Projectory2/my-app/src/components/projectsList.js\";\nimport React from \"react\";\nimport { Component } from \"react\"; // import \"./layout.scss\"\n\nimport \"./projectsList.scss\";\nimport history from \"../index\";\nimport Layout from './layout';\nimport ProjectsComponent from \"./projects\";\nimport TasksComponent from \"./tasks\";\nimport { connect } from 'react-redux';\n\nclass ProjectsListComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleProjectClick = i => {\n      this.setState({\n        chosenProject: i\n      });\n    };\n\n    this.renderProjects = (projects, chosenProject) => {\n      return projects.map(project => React.createElement(\"div\", {\n        className: \"project-item-parent \".concat(chosenProject === this.id ? 'selected' : ''),\n        onClick: () => this.handleProjectClick(chosenProject),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(ProjectsComponent, {\n        key: \"_\".concat(chosenProject),\n        data: this.projectAttributes,\n        handleClick: this.handleProjectClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })));\n    };\n\n    this.state = {\n      projects: [],\n      // chosenProjectIndex: -1,\n      chosenProject: null // tasks: [],\n\n    }; // this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    // this.toggleShow = this.toggleShow.bind(this);\n  }\n\n  projectAttributes() {\n    return {\n      id: '',\n      // name: \"Add New Project name\", \n      tasks: []\n    };\n  }\n\n  addProject() {\n    // console.log(\"Anastasia\");\n    // var newProject = new ProjectsComponent();\n    // ID generate random ID\n    const updatedProjectsArray = [...this.state.projects, this.projectAttributes()];\n    this.projectAttributes.id = Math.random().toString(36).substr(2, 9);\n    console.log(this.projectAttributes.id);\n    const chosenProjectIndex = updatedProjectsArray.length - 1; // this.setState({projects: [...this.state.projects, {name: \"Add New Project name\", tasks: []}], chosenProject: });\n\n    this.setState({\n      projects: updatedProjectsArray,\n      chosenProjectIndex\n    });\n  }\n\n  addTask() {\n    let id = Math.random().toString(36).substr(2, 9);\n    const _this$state = this.state,\n          projects = _this$state.projects,\n          chosenProjectIndex = _this$state.chosenProjectIndex;\n    const updatedProjectsArray = [...projects];\n    updatedProjectsArray[chosenProjectIndex].tasks.push(id); // this.setState({tasks: [...this.state.tasks, {name: \"Add New Task description\"}]});\n\n    this.setState({\n      projects: updatedProjectsArray\n    });\n  } // onSubmit = () => {\n  //   history.push(\"/\");\n  // }\n\n\n  render() {\n    const _this$state2 = this.state,\n          projects = _this$state2.projects,\n          chosenProjectIndex = _this$state2.chosenProjectIndex;\n    debugger;\n    return React.createElement(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"projectsList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"projects-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"my-projects-header-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"My Projects\"), React.createElement(\"div\", {\n      className: \"new-project-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"new-project-header-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"New Project\"), React.createElement(\"div\", {\n      className: \"new-project-header-icon\",\n      onClick: () => this.addProject(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"project-items-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.renderProjects(projects, chosenProject))), React.createElement(\"div\", {\n      className: \"tasksList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tasks-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"current-project\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Project name\"), React.createElement(\"div\", {\n      className: \"new-task-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"new-task-header-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"New Task\"), React.createElement(\"div\", {\n      className: \"new-task-header-icon\",\n      onClick: () => this.addTask(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"task-items-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, chosenProjectIndex !== -1 && projects[chosenProjectIndex].tasks.map(j => React.createElement(TasksComponent, {\n      key: \"_\".concat(j),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  // console.log('state ? ', state);\n  return {\n    projects: state.projects\n  };\n}\n\nexport default connect(mapStateToProps)(ProjectsListComponent);","map":{"version":3,"sources":["/home/spectory/Documents/Projectory2/my-app/src/components/projectsList.js"],"names":["React","Component","history","Layout","ProjectsComponent","TasksComponent","connect","ProjectsListComponent","constructor","props","handleProjectClick","i","setState","chosenProject","renderProjects","projects","map","project","id","projectAttributes","state","tasks","addProject","updatedProjectsArray","Math","random","toString","substr","console","log","chosenProjectIndex","length","addTask","push","render","j","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Component} from \"react\";\n// import \"./layout.scss\"\nimport \"./projectsList.scss\"\nimport history from \"../index\"\nimport Layout from './layout'\nimport ProjectsComponent from \"./projects\"\nimport TasksComponent from \"./tasks\"\nimport { connect } from 'react-redux';\n\nclass ProjectsListComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      projects: [],\n      // chosenProjectIndex: -1,\n      chosenProject: null,\n\n      // tasks: [],\n    };\n\n    // this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    // this.toggleShow = this.toggleShow.bind(this);\n  }\n\n\nprojectAttributes(){\n  return {\n    id: '',\n    // name: \"Add New Project name\", \n    tasks: [],\n  }\n}\n\naddProject(){\n  // console.log(\"Anastasia\");\n  // var newProject = new ProjectsComponent();\n\n  // ID generate random ID\n\n  const updatedProjectsArray = [...this.state.projects, this.projectAttributes()];\n  this.projectAttributes.id = Math.random().toString(36).substr(2, 9);\n  console.log(this.projectAttributes.id);\n  const chosenProjectIndex = updatedProjectsArray.length -1;\n  // this.setState({projects: [...this.state.projects, {name: \"Add New Project name\", tasks: []}], chosenProject: });\n  this.setState({projects: updatedProjectsArray, chosenProjectIndex});\n}\n\naddTask(){\n  let id = Math.random().toString(36).substr(2, 9);\n  const {projects, chosenProjectIndex} = this.state;\n  const updatedProjectsArray = [...projects];\n  updatedProjectsArray[chosenProjectIndex].tasks.push(id);\n\n  // this.setState({tasks: [...this.state.tasks, {name: \"Add New Task description\"}]});\n  this.setState({projects: updatedProjectsArray});\n}\n\n// onSubmit = () => {\n//   history.push(\"/\");\n// }\n\n  handleProjectClick = (i) => {\n    this.setState({chosenProject: i});\n  }\n\n  // renderProjects = (projects, chosenProjectIndex) => {\n  //   return (\n  //     projects.map((project, index) => (\n  //       <div \n  //         className={`project-item-parent ${chosenProjectIndex===index ? 'selected' : ''}`} \n  //         onClick={() => this.handleProjectClick(index)}\n  //       >   \n  //         <ProjectsComponent key={`_${index}`} data={this.projectAttributes} handleClick={this.handleProjectClick} /> \n  //       </div>\n  //     ))\n  //   )\n  // }\n\n    renderProjects = (projects, chosenProject) => {\n    return (\n      projects.map((project) => (\n        <div \n          className={`project-item-parent ${chosenProject===this.id ? 'selected' : ''}`} \n          onClick={() => this.handleProjectClick(chosenProject)}\n        >   \n          <ProjectsComponent key={`_${chosenProject}`} data={this.projectAttributes} handleClick={this.handleProjectClick} /> \n        </div>\n      ))\n    )\n  }\n\n  render() {\n    const {projects, chosenProjectIndex} = this.state;\n    debugger;\n    return (\n      <Layout>\n          <div className=\"projectsList\">\n            <div className=\"projects-header\">\n              <div className=\"my-projects-header-text\">My Projects</div>\n              <div className=\"new-project-header\">\n                <div className=\"new-project-header-text\">New Project</div>\n                <div className=\"new-project-header-icon\" onClick={() => this.addProject()}></div>\n                </div>\n            </div>\n            <div className=\"project-items-container\">\n            {/* {projects.map((i) => <ProjectsComponent key={`_${i}`} data={this.projectAttributes} handleClick={() => this.handleProjectClick(i)} />)} */}\n\n\n            {/* {projects.map((p, i) => <div onClick={() => this.handleProjectClick(i)}> <ProjectsComponent key={`${p.name}_${i}`} name={p.name} handleClick={this.handleProjectClick} /> </div>)} */}\n\n    {this.renderProjects(projects, chosenProject)}\n\n  {/* <div className={`menu-home-container ${display} ${this.isTabClicked('projects') ? 'clicked' : ''}`} onClick={() => this.onTabClick('projects')}> */}\n\n\n            </div>\n          </div>\n          <div className=\"tasksList\">\n            <div className=\"tasks-header\">\n              <div className=\"current-project\">Project name</div>\n              <div className=\"new-task-header\">\n                <div className=\"new-task-header-text\">New Task</div>\n              <div className=\"new-task-header-icon\" onClick={() => this.addTask()}></div>\n              </div>\n              </div>\n                 <div className=\"task-items-container\">\n                  {chosenProjectIndex !== -1 && projects[chosenProjectIndex].tasks.map((j) => <TasksComponent key={`_${j}`} />)}\n            </div>\n          </div>\n      </Layout>\n    );\n  }\n}\n\n\n  function mapStateToProps(state) {\n    // console.log('state ? ', state);\n    return { \n      projects: state.projects\n    }\n  }\n\nexport default connect(mapStateToProps)(ProjectsListComponent);"]},"metadata":{},"sourceType":"module"}