{"ast":null,"code":"var _jsxFileName = \"/home/spectory/Documents/Projectory2/my-app/src/components/projects.js\";\nimport React from \"react\";\nimport { Component } from \"react\"; // import \"./layout.scss\"\n\nimport \"./projects.scss\";\nimport history from \"../index\";\nimport Layout from './layout';\nimport ProjectsListComponent from \"./projectsList\";\nimport { connect } from 'react-redux';\nimport * as actions from '../js/actions';\n\nclass ProjectsComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onProjectClick = () => {\n      this.setState({\n        isChecked: !this.state.isChecked\n      });\n    };\n\n    this.state = {\n      isChecked: false\n    }; // this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    // this.toggleShow = this.toggleShow.bind(this);\n  } // addProject(){\n  //   let projectItem = document.createElement(\"div\").classList.add(\"project-item\");\n  //   let projectPickByName = document.createElement(\"div\").classList.add(\"project-pick-by-name\");\n  //   let projectPick = document.createElement(\"div\").classList.add(\"project-pick\");\n  //   let projectName = document.createElement(\"div\").classList.add(\"project-name\");\n  //   let projectItemsContainer = document.getElementsByClassName(\"project-items-container\")[0];\n  // }\n  // onSubmit = () => {\n  //   history.push(\"/\");\n  // }\n  // checkbox(){\n  //   if(this.state.isClicked){\n  //     document.querySelector(\"project-item\").classList.remove(\"cross\");\n  //     this.state.isClicked = false;\n  //   }\n  //   else{\n  //     document.querySelector(\"project-item\").classList.add(\"cross\");\n  //     this.state.isClicked = true;\n  //   }\n  // } \n  //   createDate(){\n  //       var date = new Date(`new Date().getFullYear(), '/', new Date().getMonth() , '/', new Date().getDate()`);\n  //       return date;\n  //   }\n\n\n  // deleteProject(){\n  //   document.getElementsByClassName(\"project-item\")[0].remove();\n  // }\n\n  /* checking if the tab(container) is the current clicked tab according to the clickedTab state */\n  // isProjectClicked = (currentProject) => this.state.isChecked.includes(currentProject);\n  stam() {\n    console.log(this.props.data);\n    this.props.deleteProjectFromParent(this.props.data);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"project-item \".concat(this.state.isChecked ? 'cross' : ''),\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"project-pick-by-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"project-pick \".concat(this.state.isChecked ? 'checked' : ''),\n      onClick: () => this.onProjectClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"project-name\",\n      type: \"text\",\n      placeholder: \"Add a new project name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"project-create-date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Today\"), React.createElement(\"div\", {\n      className: \"project-delete\",\n      onClick: () => this.stam(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteProject: project => dispatch(actions.deleteProject(project))\n  };\n}\n\nexport default connect(mapDispatchToProps)(ProjectsComponent);","map":{"version":3,"sources":["/home/spectory/Documents/Projectory2/my-app/src/components/projects.js"],"names":["React","Component","history","Layout","ProjectsListComponent","connect","actions","ProjectsComponent","constructor","props","onProjectClick","setState","isChecked","state","stam","console","log","data","deleteProjectFromParent","render","handleClick","mapDispatchToProps","dispatch","deleteProject","project"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,OAAxB,C,CACA;;AACA,OAAO,iBAAP;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,qBAAP,MAAkC,gBAAlC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,eAAzB;;AAGA,MAAMC,iBAAN,SAAgCN,SAAhC,CAA0C;AACxCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAwCnBC,cAxCmB,GAwCF,MAAM;AACrB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE,CAAC,KAAKC,KAAL,CAAWD;AAAzB,OAAd;AACD,KA1CkB;;AAGjB,SAAKC,KAAL,GAAa;AACTD,MAAAA,SAAS,EAAE;AADF,KAAb,CAHiB,CAOjB;AACA;AACD,GAVuC,CAY1C;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEE;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;;;AAME;AACA;AACA;;AAEA;AACA;AACFE,EAAAA,IAAI,GAAE;AACJC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWQ,IAAvB;AACA,SAAKR,KAAL,CAAWS,uBAAX,CAAmC,KAAKT,KAAL,CAAWQ,IAA9C;AACD;;AACCE,EAAAA,MAAM,GAAG;AACP,WACQ;AAAK,MAAA,SAAS,yBAAkB,KAAKN,KAAL,CAAWD,SAAX,GAAuB,OAAvB,GAAiC,EAAnD,CAAd;AAAuE,MAAA,OAAO,EAAE,KAAKQ,WAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGQ;AAAK,MAAA,SAAS,yBAAkB,KAAKP,KAAL,CAAWD,SAAX,GAAuB,SAAvB,GAAmC,EAArD,CAAd;AAAyE,MAAA,OAAO,EAAE,MAAM,KAAKF,cAAL,EAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHR,EAII;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,IAAI,EAAC,MAArC;AAA4C,MAAA,WAAW,EAAC,wBAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADA,EAOA;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPA,EAQA;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,OAAO,EAAI,MAAM,KAAKI,IAAL,EAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,CADR;AAYD;;AApEuC;;AAuExC,SAASO,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLC,IAAAA,aAAa,EAAEC,OAAO,IAAIF,QAAQ,CAAChB,OAAO,CAACiB,aAAR,CAAsBC,OAAtB,CAAD;AAD7B,GAAP;AAID;;AAEH,eAAenB,OAAO,CAACgB,kBAAD,CAAP,CAA4Bd,iBAA5B,CAAf","sourcesContent":["import React from \"react\";\nimport {Component} from \"react\";\n// import \"./layout.scss\"\nimport \"./projects.scss\"\nimport history from \"../index\"\nimport Layout from './layout'\nimport ProjectsListComponent from \"./projectsList\"\nimport { connect } from 'react-redux'\nimport * as actions from '../js/actions'\n\n\nclass ProjectsComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        isChecked: false,\n    };\n\n    // this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    // this.toggleShow = this.toggleShow.bind(this);\n  }\n\n// addProject(){\n//   let projectItem = document.createElement(\"div\").classList.add(\"project-item\");\n//   let projectPickByName = document.createElement(\"div\").classList.add(\"project-pick-by-name\");\n//   let projectPick = document.createElement(\"div\").classList.add(\"project-pick\");\n//   let projectName = document.createElement(\"div\").classList.add(\"project-name\");\n//   let projectItemsContainer = document.getElementsByClassName(\"project-items-container\")[0];\n// }\n\n// onSubmit = () => {\n//   history.push(\"/\");\n// }\n\n  // checkbox(){\n  //   if(this.state.isClicked){\n  //     document.querySelector(\"project-item\").classList.remove(\"cross\");\n      \n  //     this.state.isClicked = false;\n  //   }\n  //   else{\n  //     document.querySelector(\"project-item\").classList.add(\"cross\");\n  //     this.state.isClicked = true;\n  //   }\n  // } \n\n//   createDate(){\n//       var date = new Date(`new Date().getFullYear(), '/', new Date().getMonth() , '/', new Date().getDate()`);\n//       return date;\n//   }\n\n  onProjectClick = () => {\n    this.setState({ isChecked: !this.state.isChecked });\n  }\n\n  // deleteProject(){\n  //   document.getElementsByClassName(\"project-item\")[0].remove();\n  // }\n\n  /* checking if the tab(container) is the current clicked tab according to the clickedTab state */ \n  // isProjectClicked = (currentProject) => this.state.isChecked.includes(currentProject);\nstam(){\n  console.log(this.props.data); \n  this.props.deleteProjectFromParent(this.props.data);\n}\n  render() {\n    return (\n            <div className={`project-item ${this.state.isChecked ? 'cross' : ''}`} onClick={this.handleClick}>\n            <div className=\"project-pick-by-name\">\n                {/* <div className=\"project-pick\" onClick={() => this.crossProject()}></div> */}\n                    {/* <div className={`project-pick ${this.isProjectClicked() ? 'checked' : ''}`} onClick={() => this.onProjectClick()}/> */}\n                    <div className={`project-pick ${this.state.isChecked ? 'checked' : ''}`} onClick={() => this.onProjectClick()}/>\n                <input className=\"project-name\" type=\"text\" placeholder=\"Add a new project name\"/>\n            </div>\n            <div className=\"project-create-date\">Today</div>\n            <div className=\"project-delete\" onClick = {() => this.stam()}/>\n            </div>\n    );\n  }\n}\n\n  function mapDispatchToProps(dispatch) {\n    return {\n      deleteProject: project => dispatch(actions.deleteProject(project)),\n      \n    }\n  }\n\nexport default connect(mapDispatchToProps)(ProjectsComponent);"]},"metadata":{},"sourceType":"module"}