{"ast":null,"code":"var _jsxFileName = \"/home/spectory/Documents/Projectory nodejs/client/src/components/projectsList.js\";\nimport React from \"react\";\nimport { Component } from \"react\"; // import \"./layout.scss\"\n\nimport \"./projectsList.scss\";\nimport history from \"../index\";\nimport Layout from './layout';\nimport ProjectsComponent from \"./projects\";\nimport TasksComponent from \"./tasks\";\nimport { connect } from 'react-redux';\n\nclass ProjectsListComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.projectAttributes = projectID => {\n      return {\n        id: projectID,\n        // id: this.createKey(),\n        // name: \"Add New Project name\", \n        tasks: []\n      };\n    };\n\n    this.handleProjectClick = project => {\n      this.setState({\n        chosenProject: project\n      });\n    };\n\n    this.renderProjects = (projects, chosenProject) => {\n      // debugger;\n      // if(chosenProject === undefined){\n      //   return;\n      // }\n      return projects.map(project => React.createElement(\"div\", {\n        className: \"project-item-parent \".concat(chosenProject !== undefined && chosenProject.project_id === project.project_id ? 'selected' : ''),\n        onClick: () => this.handleProjectClick(project),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(ProjectsComponent, {\n        key: \"_\".concat(chosenProject),\n        data: project.project_id,\n        deleteProjectFromParent: project_id => this.deleteProject(project_id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      })));\n    };\n\n    this.state = {\n      projects: [],\n      // chosenProjectIndex: -1,\n      chosenProject: undefined // tasks: [],\n\n    };\n    this.loadProjects();\n  }\n\n  createKey() {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  async addProject() {\n    // ID generate random ID\n    // const newProject = this.projectAttributes();\n    // const updatedProjectsArray = [...this.state.projects, newProject];\n    // const chosenProject= newProject;\n    // this.setState({projects: updatedProjectsArray, chosenProject});\n    const response = await fetch('http://localhost:5000/addProject', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        \"email\": this.props.email\n      })\n    });\n    const myJson = await response.json();\n    const newProject = this.projectAttributes(myJson.project_id);\n    const updatedProjectsArray = [...this.state.projects, newProject];\n    const chosenProject = newProject;\n    this.setState({\n      projects: updatedProjectsArray,\n      chosenProject\n    });\n  } // this.setState({projects: [...this.state.projects, {name: \"Add New Project name\", tasks: []}], chosenProject: });\n\n\n  async loadProjects() {\n    debugger;\n    const response = await fetch('http://localhost:5000/getProjects', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        \"email\": this.props.email\n      })\n    });\n    var myJson = await response.json();\n    console.log(myJson);\n    this.setState({\n      projects: myJson\n    }); // this.renderProjects(this.state.projects);\n\n    console.log(this.state.projects);\n  }\n\n  async addTask() {\n    const _this$state = this.state,\n          projects = _this$state.projects,\n          chosenProject = _this$state.chosenProject;\n\n    if (chosenProject === undefined) {\n      return;\n    }\n\n    debugger;\n    const response = await fetch('http://localhost:5000/addTask', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        \"project_id\": chosenProject.project_id\n      })\n    });\n    var myJson = await response.json();\n    console.log(myJson);\n    const updatedProjectsArray = [...projects];\n    const currentProjectIndex = projects.findIndex(p => p.id === chosenProject.id);\n    updatedProjectsArray[currentProjectIndex].tasks.push({}); // updatedProjectsArray[currentProjectIndex].tasks.push({id: '', value: '',});\n    // updatedProjectsArray[chosenProject].tasks.push({id: '', value: '',});\n    // this.setState({tasks: [...this.state.tasks, {name: \"Add New Task description\"}]});\n\n    this.setState({\n      projects: updatedProjectsArray,\n      currentProject: updatedProjectsArray[currentProjectIndex]\n    });\n    console.log(this.state.projects);\n  } // onSubmit = () => {\n  //   history.push(\"/\");\n  // }\n\n\n  deleteProject(project_id) {\n    debugger;\n    console.log(project_id); // e.stopPropagation();\n\n    const projects = this.state.projects;\n    let currentProjectIndex = projects.findIndex(project => project.project_id === project_id);\n    console.log(currentProjectIndex);\n    const updatedProjectsArray = [...projects];\n    updatedProjectsArray.splice(currentProjectIndex, 1);\n    this.setState({\n      projects: updatedProjectsArray\n    });\n    console.log(this.state.projects);\n  } // renderProjects = (projects, chosenProjectIndex) => {\n  //   return (\n  //     projects.map((project, index) => (\n  //       <div \n  //         className={`project-item-parent ${chosenProjectIndex===index ? 'selected' : ''}`} \n  //         onClick={() => this.handleProjectClick(index)}\n  //       >   \n  //         <ProjectsComponent key={`_${index}`} data={this.projectAttributes} handleClick={this.handleProjectClick} /> \n  //       </div>\n  //     ))\n  //   )\n  // }\n\n\n  //   componentDidMount() {\n  //   this.loadProjects();\n  // }\n  render() {\n    const _this$state2 = this.state,\n          projects = _this$state2.projects,\n          chosenProject = _this$state2.chosenProject;\n    return React.createElement(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"projectsList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"projects-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"my-projects-header-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"My Projects\"), React.createElement(\"div\", {\n      className: \"new-project-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"new-project-header-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"New Project\"), React.createElement(\"div\", {\n      className: \"new-project-header-icon\",\n      onClick: () => this.addProject(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"project-items-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, this.renderProjects(projects, chosenProject))), React.createElement(\"div\", {\n      className: \"tasksList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tasks-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"current-project\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Project name\"), React.createElement(\"div\", {\n      className: \"new-task-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"new-task-header-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"New Task\"), React.createElement(\"div\", {\n      className: \"new-task-header-icon\",\n      onClick: () => this.addTask(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"task-items-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, chosenProject && chosenProject.tasks.map(j => React.createElement(TasksComponent, {\n      key: this.createKey(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  // console.log('state ? ', state);\n  return {\n    projects: state.projects,\n    email: state.email\n  };\n}\n\nexport default connect(mapStateToProps)(ProjectsListComponent);","map":{"version":3,"sources":["/home/spectory/Documents/Projectory nodejs/client/src/components/projectsList.js"],"names":["React","Component","history","Layout","ProjectsComponent","TasksComponent","connect","ProjectsListComponent","constructor","props","projectAttributes","projectID","id","tasks","handleProjectClick","project","setState","chosenProject","renderProjects","projects","map","undefined","project_id","deleteProject","state","loadProjects","createKey","Math","random","toString","substr","addProject","response","fetch","method","headers","body","JSON","stringify","email","myJson","json","newProject","updatedProjectsArray","console","log","addTask","currentProjectIndex","findIndex","p","push","currentProject","splice","render","j","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {Component} from \"react\";\r\n// import \"./layout.scss\"\r\nimport \"./projectsList.scss\"\r\nimport history from \"../index\"\r\nimport Layout from './layout'\r\nimport ProjectsComponent from \"./projects\"\r\nimport TasksComponent from \"./tasks\"\r\nimport { connect } from 'react-redux';\r\n\r\nclass ProjectsListComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      projects: [],\r\n      // chosenProjectIndex: -1,\r\n      chosenProject: undefined,\r\n\r\n      // tasks: [],\r\n    };\r\n\r\n    this.loadProjects();\r\n  }\r\n\r\n  createKey(){\r\n    return Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\nprojectAttributes = (projectID) => {\r\n  return {\r\n    id: projectID,\r\n    // id: this.createKey(),\r\n    // name: \"Add New Project name\", \r\n    tasks: [],\r\n  }\r\n}\r\n\r\nasync addProject(){\r\n  // ID generate random ID\r\n  \r\n  // const newProject = this.projectAttributes();\r\n  // const updatedProjectsArray = [...this.state.projects, newProject];\r\n  // const chosenProject= newProject;\r\n  // this.setState({projects: updatedProjectsArray, chosenProject});\r\n\r\n  const response = await fetch('http://localhost:5000/addProject', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json',\r\n    'Accept': 'application/json' },\r\n    body: JSON.stringify({\"email\" : this.props.email})\r\n  });\r\n  const myJson = await response.json();\r\n  \r\n  const newProject = this.projectAttributes(myJson.project_id);\r\n  const updatedProjectsArray = [...this.state.projects, newProject];\r\n  const chosenProject= newProject;\r\n  this.setState({projects: updatedProjectsArray, chosenProject});\r\n}\r\n\r\n  // this.setState({projects: [...this.state.projects, {name: \"Add New Project name\", tasks: []}], chosenProject: });\r\n\r\n  async loadProjects(){\r\n    debugger;\r\n    const response = await fetch('http://localhost:5000/getProjects', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json',\r\n    'Accept': 'application/json' },\r\n    body: JSON.stringify({\"email\" : this.props.email})\r\n  });\r\n\r\n    var myJson = await response.json();\r\n    console.log(myJson);\r\n\r\n    \r\n\r\n    this.setState({projects: myJson})\r\n\r\n    // this.renderProjects(this.state.projects);\r\n\r\n    console.log(this.state.projects);\r\n  }\r\n  \r\n\r\nasync addTask(){\r\n  const {projects, chosenProject} = this.state;\r\n    if(chosenProject===undefined){\r\n      return;\r\n    }\r\n\r\n\r\n    debugger;\r\n    const response = await fetch('http://localhost:5000/addTask', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json',\r\n    'Accept': 'application/json' },\r\n    body: JSON.stringify({\"project_id\" : chosenProject.project_id})\r\n  });\r\n\r\n    var myJson = await response.json();\r\n    console.log(myJson);\r\n\r\n  const updatedProjectsArray = [...projects];\r\n  const currentProjectIndex = projects.findIndex(p => p.id === chosenProject.id);\r\n  updatedProjectsArray[currentProjectIndex].tasks.push({});\r\n  \r\n    // updatedProjectsArray[currentProjectIndex].tasks.push({id: '', value: '',});\r\n  // updatedProjectsArray[chosenProject].tasks.push({id: '', value: '',});\r\n\r\n  // this.setState({tasks: [...this.state.tasks, {name: \"Add New Task description\"}]});\r\n  this.setState({projects: updatedProjectsArray, currentProject: updatedProjectsArray[currentProjectIndex]});\r\n\r\n      console.log(this.state.projects);\r\n}\r\n\r\n// onSubmit = () => {\r\n//   history.push(\"/\");\r\n// }\r\n\r\n  handleProjectClick = (project) => {\r\n    this.setState({chosenProject: project});\r\n  }\r\n\r\n  deleteProject(project_id){\r\n    debugger;\r\n    console.log(project_id);\r\n    // e.stopPropagation();\r\n    const {projects} = this.state;\r\n    let currentProjectIndex = projects.findIndex(project => project.project_id === project_id);\r\n    console.log(currentProjectIndex);\r\n    const updatedProjectsArray = [...projects];\r\n    updatedProjectsArray.splice(currentProjectIndex, 1);\r\n    this.setState({projects: updatedProjectsArray});\r\n    console.log(this.state.projects);\r\n  }\r\n\r\n  // renderProjects = (projects, chosenProjectIndex) => {\r\n  //   return (\r\n  //     projects.map((project, index) => (\r\n  //       <div \r\n  //         className={`project-item-parent ${chosenProjectIndex===index ? 'selected' : ''}`} \r\n  //         onClick={() => this.handleProjectClick(index)}\r\n  //       >   \r\n  //         <ProjectsComponent key={`_${index}`} data={this.projectAttributes} handleClick={this.handleProjectClick} /> \r\n  //       </div>\r\n  //     ))\r\n  //   )\r\n  // }\r\n\r\n    renderProjects = (projects, chosenProject) => {\r\n      // debugger;\r\n    // if(chosenProject === undefined){\r\n    //   return;\r\n    // }\r\n    return (\r\n      projects.map((project) => (\r\n        <div \r\n          className={`project-item-parent ${chosenProject !== undefined && chosenProject.project_id===project.project_id ? 'selected' : ''}`} \r\n          onClick={() => this.handleProjectClick(project)}\r\n        >   \r\n          <ProjectsComponent key={`_${chosenProject}`} data={project.project_id} deleteProjectFromParent={(project_id) => this.deleteProject(project_id)} /> \r\n        </div>\r\n      ))\r\n    )\r\n    \r\n  }\r\n\r\n//   componentDidMount() {\r\n//   this.loadProjects();\r\n// }\r\n\r\n\r\n\r\n  render() {\r\n    const {projects, chosenProject} = this.state;\r\n    return (\r\n      <Layout>\r\n          <div className=\"projectsList\">\r\n            <div className=\"projects-header\">\r\n              <div className=\"my-projects-header-text\">My Projects</div>\r\n              <div className=\"new-project-header\">\r\n                <div className=\"new-project-header-text\">New Project</div>\r\n                <div className=\"new-project-header-icon\" onClick={() => this.addProject()}></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"project-items-container\">\r\n            {/* {projects.map((i) => <ProjectsComponent key={`_${i}`} data={this.projectAttributes} handleClick={() => this.handleProjectClick(i)} />)} */}\r\n  \r\n\r\n            {/* {projects.map((p, i) => <div onClick={() => this.handleProjectClick(i)}> <ProjectsComponent key={`${p.name}_${i}`} name={p.name} handleClick={this.handleProjectClick} /> </div>)} */}\r\n    {this.renderProjects(projects, chosenProject)}\r\n\r\n  {/* <div className={`menu-home-container ${display} ${this.isTabClicked('projects') ? 'clicked' : ''}`} onClick={() => this.onTabClick('projects')}> */}\r\n\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"tasksList\">\r\n            <div className=\"tasks-header\">\r\n              <div className=\"current-project\">Project name</div>\r\n              <div className=\"new-task-header\">\r\n                <div className=\"new-task-header-text\">New Task</div>\r\n              <div className=\"new-task-header-icon\" onClick={() => this.addTask()}></div>\r\n              </div>\r\n              </div>\r\n                 <div className=\"task-items-container\">\r\n                  {chosenProject && chosenProject.tasks.map((j) => <TasksComponent key={this.createKey()}/>)}\r\n            </div>\r\n          </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n  function mapStateToProps(state) {\r\n    // console.log('state ? ', state);\r\n    return { \r\n      projects: state.projects,\r\n      email: state.email\r\n    }\r\n  }\r\n\r\nexport default connect(mapStateToProps)(ProjectsListComponent);"]},"metadata":{},"sourceType":"module"}