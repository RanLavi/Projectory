{"ast":null,"code":"var _jsxFileName = \"/home/spectory/Documents/Projectory2/my-app/src/components/projectsList.js\";\nimport React from \"react\";\nimport { Component } from \"react\"; // import \"./layout.scss\"\n\nimport \"./projectsList.scss\";\nimport history from \"../index\";\nimport Layout from './layout';\nimport ProjectsComponent from \"./projects\";\nimport TasksComponent from \"./tasks\";\nimport { connect } from 'react-redux';\n\nclass ProjectsListComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.projectAttributes = () => {\n      return {\n        id: this.createKey(),\n        // name: \"Add New Project name\", \n        tasks: []\n      };\n    };\n\n    this.handleProjectClick = i => {\n      this.setState({\n        chosenProject: i\n      });\n    };\n\n    this.renderProjects = (projects, chosenProject) => {\n      return projects.map((project, id) => React.createElement(\"div\", {\n        className: \"project-item-parent \".concat(chosenProject.id === project.id ? 'selected' : ''),\n        onClick: () => this.handleProjectClick(project),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(ProjectsComponent, {\n        key: \"_\".concat(chosenProject),\n        data: this.projectAttributes,\n        deleteProjectFromParent: () => this.deleteProject(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })));\n    };\n\n    this.state = {\n      projects: [],\n      // chosenProjectIndex: -1,\n      chosenProject: undefined // tasks: [],\n\n    }; // this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    // this.toggleShow = this.toggleShow.bind(this);\n  }\n\n  createKey() {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  addProject() {\n    // console.log(\"Anastasia\");\n    // var newProject = new ProjectsComponent();\n    // ID generate random ID\n    const newProject = this.projectAttributes();\n    const updatedProjectsArray = [...this.state.projects, newProject];\n    const chosenProject = newProject;\n    this.setState({\n      projects: updatedProjectsArray,\n      chosenProject\n    });\n  } // this.setState({projects: [...this.state.projects, {name: \"Add New Project name\", tasks: []}], chosenProject: });\n\n\n  addTask() {\n    const _this$state = this.state,\n          projects = _this$state.projects,\n          chosenProject = _this$state.chosenProject;\n    const updatedProjectsArray = [...projects];\n    const currentProjectIndex = projects.findIndex(p => p.id === chosenProject.id);\n    updatedProjectsArray[currentProjectIndex].tasks.push({\n      id: '',\n      value: ''\n    }); // updatedProjectsArray[chosenProject].tasks.push({id: '', value: '',});\n    // this.setState({tasks: [...this.state.tasks, {name: \"Add New Task description\"}]});\n\n    this.setState({\n      projects: updatedProjectsArray,\n      currentProject: updatedProjectsArray[currentProjectIndex]\n    });\n  } // onSubmit = () => {\n  //   history.push(\"/\");\n  // }\n\n\n  deleteProject() {\n    console.log(\"RRR\");\n    const _this$state2 = this.state,\n          projects = _this$state2.projects,\n          chosenProject = _this$state2.chosenProject;\n    console.log(\"RRR\");\n    const currentProjectIndex = projects.findIndex(p => p.id === chosenProject.id);\n    const updatedProjectsArray = [...projects];\n    updatedProjectsArray.splice(currentProjectIndex, 1);\n    this.setState({\n      projects: updatedProjectsArray\n    });\n  } // renderProjects = (projects, chosenProjectIndex) => {\n  //   return (\n  //     projects.map((project, index) => (\n  //       <div \n  //         className={`project-item-parent ${chosenProjectIndex===index ? 'selected' : ''}`} \n  //         onClick={() => this.handleProjectClick(index)}\n  //       >   \n  //         <ProjectsComponent key={`_${index}`} data={this.projectAttributes} handleClick={this.handleProjectClick} /> \n  //       </div>\n  //     ))\n  //   )\n  // }\n\n\n  render() {\n    const _this$state3 = this.state,\n          projects = _this$state3.projects,\n          chosenProject = _this$state3.chosenProject;\n    return React.createElement(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"projectsList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"projects-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"my-projects-header-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"My Projects\"), React.createElement(\"div\", {\n      className: \"new-project-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"new-project-header-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"New Project\"), React.createElement(\"div\", {\n      className: \"new-project-header-icon\",\n      onClick: () => this.addProject(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"project-items-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.renderProjects(projects, chosenProject))), React.createElement(\"div\", {\n      className: \"tasksList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tasks-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"current-project\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Project name\"), React.createElement(\"div\", {\n      className: \"new-task-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"new-task-header-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"New Task\"), React.createElement(\"div\", {\n      className: \"new-task-header-icon\",\n      onClick: () => this.addTask(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"task-items-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, chosenProject && chosenProject.tasks.map(j => React.createElement(TasksComponent, {\n      key: this.createKey(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  // console.log('state ? ', state);\n  return {\n    projects: state.projects\n  };\n}\n\nexport default connect(mapStateToProps)(ProjectsListComponent);","map":{"version":3,"sources":["/home/spectory/Documents/Projectory2/my-app/src/components/projectsList.js"],"names":["React","Component","history","Layout","ProjectsComponent","TasksComponent","connect","ProjectsListComponent","constructor","props","projectAttributes","id","createKey","tasks","handleProjectClick","i","setState","chosenProject","renderProjects","projects","map","project","deleteProject","state","undefined","Math","random","toString","substr","addProject","newProject","updatedProjectsArray","addTask","currentProjectIndex","findIndex","p","push","value","currentProject","console","log","splice","render","j","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Component} from \"react\";\n// import \"./layout.scss\"\nimport \"./projectsList.scss\"\nimport history from \"../index\"\nimport Layout from './layout'\nimport ProjectsComponent from \"./projects\"\nimport TasksComponent from \"./tasks\"\nimport { connect } from 'react-redux';\n\nclass ProjectsListComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      projects: [],\n      // chosenProjectIndex: -1,\n      chosenProject: undefined,\n\n      // tasks: [],\n    };\n\n    // this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    // this.toggleShow = this.toggleShow.bind(this);\n  }\n\n  createKey(){\n    return Math.random().toString(36).substr(2, 9);\n  }\n\nprojectAttributes = () => {\n  return {\n    id: this.createKey(),\n    // name: \"Add New Project name\", \n    tasks: [],\n  }\n}\n\naddProject(){\n  // console.log(\"Anastasia\");\n  // var newProject = new ProjectsComponent();\n\n  // ID generate random ID\n  \n  const newProject = this.projectAttributes();\n  const updatedProjectsArray = [...this.state.projects, newProject];\n  const chosenProject= newProject;\n  this.setState({projects: updatedProjectsArray, chosenProject});\n}\n\n  // this.setState({projects: [...this.state.projects, {name: \"Add New Project name\", tasks: []}], chosenProject: });\n\n  \n\naddTask(){\n  const {projects, chosenProject} = this.state;\n  const updatedProjectsArray = [...projects];\n  const currentProjectIndex = projects.findIndex(p => p.id === chosenProject.id);\n  updatedProjectsArray[currentProjectIndex].tasks.push({id: '', value: '',});\n  \n  // updatedProjectsArray[chosenProject].tasks.push({id: '', value: '',});\n\n  // this.setState({tasks: [...this.state.tasks, {name: \"Add New Task description\"}]});\n  this.setState({projects: updatedProjectsArray, currentProject: updatedProjectsArray[currentProjectIndex]});\n}\n\n// onSubmit = () => {\n//   history.push(\"/\");\n// }\n\n  handleProjectClick = (i) => {\n    this.setState({chosenProject: i});\n  }\n\n  deleteProject(){\n    console.log(\"RRR\");\n    const {projects, chosenProject} = this.state;\n    console.log(\"RRR\");\n    const currentProjectIndex = projects.findIndex(p => p.id === chosenProject.id);\n    const updatedProjectsArray = [...projects];\n    updatedProjectsArray.splice(currentProjectIndex, 1);\n    this.setState({projects: updatedProjectsArray});\n  }\n\n  // renderProjects = (projects, chosenProjectIndex) => {\n  //   return (\n  //     projects.map((project, index) => (\n  //       <div \n  //         className={`project-item-parent ${chosenProjectIndex===index ? 'selected' : ''}`} \n  //         onClick={() => this.handleProjectClick(index)}\n  //       >   \n  //         <ProjectsComponent key={`_${index}`} data={this.projectAttributes} handleClick={this.handleProjectClick} /> \n  //       </div>\n  //     ))\n  //   )\n  // }\n\n    renderProjects = (projects, chosenProject) => {\n    return (\n      projects.map((project, id) => (\n        <div \n          className={`project-item-parent ${chosenProject.id===project.id ? 'selected' : ''}`} \n          onClick={() => this.handleProjectClick(project)}\n        >   \n          <ProjectsComponent key={`_${chosenProject}`} data={this.projectAttributes} deleteProjectFromParent={() => this.deleteProject()} /> \n        </div>\n      ))\n    )\n  }\n\n  render() {\n    const {projects, chosenProject} = this.state;\n    return (\n      <Layout>\n          <div className=\"projectsList\">\n            <div className=\"projects-header\">\n              <div className=\"my-projects-header-text\">My Projects</div>\n              <div className=\"new-project-header\">\n                <div className=\"new-project-header-text\">New Project</div>\n                <div className=\"new-project-header-icon\" onClick={() => this.addProject()}></div>\n                </div>\n            </div>\n            <div className=\"project-items-container\">\n            {/* {projects.map((i) => <ProjectsComponent key={`_${i}`} data={this.projectAttributes} handleClick={() => this.handleProjectClick(i)} />)} */}\n\n\n            {/* {projects.map((p, i) => <div onClick={() => this.handleProjectClick(i)}> <ProjectsComponent key={`${p.name}_${i}`} name={p.name} handleClick={this.handleProjectClick} /> </div>)} */}\n\n    {this.renderProjects(projects, chosenProject)}\n\n  {/* <div className={`menu-home-container ${display} ${this.isTabClicked('projects') ? 'clicked' : ''}`} onClick={() => this.onTabClick('projects')}> */}\n\n\n            </div>\n          </div>\n          <div className=\"tasksList\">\n            <div className=\"tasks-header\">\n              <div className=\"current-project\">Project name</div>\n              <div className=\"new-task-header\">\n                <div className=\"new-task-header-text\">New Task</div>\n              <div className=\"new-task-header-icon\" onClick={() => this.addTask()}></div>\n              </div>\n              </div>\n                 <div className=\"task-items-container\">\n                  {chosenProject && chosenProject.tasks.map((j) => <TasksComponent key={this.createKey()}/>)}\n            </div>\n          </div>\n      </Layout>\n    );\n  }\n}\n\n\n  function mapStateToProps(state) {\n    // console.log('state ? ', state);\n    return { \n      projects: state.projects\n    }\n  }\n\nexport default connect(mapStateToProps)(ProjectsListComponent);"]},"metadata":{},"sourceType":"module"}